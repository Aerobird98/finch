// TODO(bob): Really need to fix relative path loading.
load("../../lib/lexer.fin")
load("../../lib/ast.fin")
load("../../lib/pretty-print.fin")

var Parser = [
  new-tokens: tokens {
    [|self traits|] init-tokens: tokens ; yourself
  }

  traits = [
    init-tokens: tokens {
      _tokens = tokens
      _read = []
    }

    if-look-ahead: type then: then {
      self if-look-ahead: type then: then else: nil
    }

    if-look-ahead: type then: then else: else {
      self fill-look-ahead: 1
      if (_read.at(0).type == type) then (then) else (else)
    }

    if-look-ahead: type1 : type2 then: then {
      self fill-look-ahead: 2
      var pass = (_read.at(0).type == type1).and { (_read.at(1) type == type2 }
      if (pass) then (then)
    }

    look-ahead: type1 : type2 : type3 {
      self fill-look-ahead: 3
      (_read.at(0).type == type1).and {
        (_read.at(2).type == type2).and {
          _read.at(3).type == type3
        }
      }
    }

    match: type {
      if (self look-ahead: type) then {
        self consume
        true
      } else {
        false
      }
    }

    // If the next token matches the given type, calls the block.
    match: type then: then else: else {
      self if-look-ahead: type then: {
        then.call(self.consume)
      } else: else
    }

    // If the next token matches the given type, calls the block.
    match: type then: block {
      self if-look-ahead: type then: {
        block.call(self.consume)
      }
    }

    // If the next token matches the given type, calls the block.
    match: type1 : type2 then: block {
      self if-look-ahead: type1 : type2 then: {
        block.call(self.consume, self.consume)
      }
    }

    while-match: type do: block {
      self if-look-ahead: type then: {
        block.call(self.consume)
        self while-match: type do: block
      }
    }

    current {
      _read.at(0)
    }

    consume {
      self fill-look-ahead: 1
      var token = _read.remove-at(0)
      token
    }

    consume: type error: error {
      // TODO: Should unwind or something!
      self if-look-ahead: type then: {
        self consume
      } else: {
        print(error)
        print("Got " + self current)
      }
    }

    consume: type {
      self consume: type error: "Expect token " + type
    }

    fill-look-ahead: count {
      while { _read.count < count } do {
        _read.add(_tokens.next-token)
      }
    }
  ]
]

var FinchParser = [|Parser|
  traits = [|self traits|
    parse {
      var expr = self expression
      self consume: Token/Eof
      expr
    }

    expression {
      self sequence
    }

    sequence {
      var exprs = self parse-sequence

      // If there's just one, don't wrap it.
      if (exprs count == 1) then {
        return exprs.at(0)
      }

      Expr sequence: exprs
    }

    bind {
      var expr = self assignment
      self while-match: Token/Bind do: {
        var defines = []
        self if-look-ahead: Token/LeftParen then: {
          self consume: Token/LeftParen
          defines = self parse-defines
        } else: {
          defines = [self parse-define]
        }

        expr = Expr bind-receiver: expr defines: defines
      }
      expr
    }

    assignment {
      self match: Token/Name : Token/Arrow then: { name arrow ->
        // TODO(bob): Handle "undefined".
        var value = self assignment
        return Expr var-name: name text value: value
      }

      self match: Token/Name : Token/LongArrow then: { name arrow ->
        var value = self assignment
        return Expr set-name: name text value: value
      }

      self cascade
    }

    cascade {
      self keyword
    }

    keyword {
      var expr = self operator

      var message = ""
      var args = []
      self while-match: Token/Keyword do: { keyword ->
        message = message + keyword text
        args.add(self.operator)
      }

      if (args count > 0) then {
        Expr message-receiver: expr name: message args: args
      } else {
        expr
      }
    }

    operator {
      var expr = self unary
      self while-match: Token/Operator do: { operator ->
        var right = self unary
        expr = Expr message-receiver: expr name: operator text args: [right]
      }
      expr
    }

    unary {
      var expr = self primary
      self while-match: Token/Name do: { name ->
        expr = Expr message-receiver: expr name: name text args: []
      }
      expr
    }

    primary {
      self match: Token/Number then: { token ->
        return Expr number: token text
      }

      self match: Token/String then: { token ->
        return Expr string: token text
      }

      self match: Token/Name then: { token ->
        return Expr name: token text
      }

      self match: Token/Self then: { token ->
        return Expr self_
      }

      self match: Token/LeftParen then: {
        self match: Token/Pipe then: {
          // Object literal.
          var parent = nil
          self match: Token/Pipe then: {
            // No explicit parent.
            parent = nil
          } else: {
            parent = self assignment
            self consume: Token/Pipe
          }

          var defines = nil
          self match: Token/RightParen then: {
            // No defines.
            defines = []
          } else: {
            defines = self parse-defines
          }

          return Expr object-parent: parent defines: defines
        }

        // Just parentheses for grouping.
        var expr = self expression
        self consume: Token/RightParen error: "Expect closing ')'."
        return expr
      }

      // Array.
      self match: Token/LeftBracket then: {
        var elements = nil
        self match: Token/RightBracket then: {
          // Allow empty arrays.
          elements = []
        } else: {
          elements = self parse-sequence
          self consume: Token/RightBracket
        }

        return Expr array: elements
      }

      // Block.
      self match: Token/LeftBrace then: {
        // Parse the parameter list if present.
        var params = []
        self match: Token/Pipe then: {
          self while-match: Token/Name do: { name ->
            params.add(name.text)
          }
          self consume: Token/Pipe
        }

        var body = self expression
        self consume: Token/RightBrace

        return Expr block-params: params body: body
      }

      // Keyword send to Ether.
      self if-look-ahead: Token/Keyword then: {
        var message = ""
        var args = []
        self while-match: Token/Keyword do: { keyword ->
          message = keyword text
          var args = self operator
        }
        return Expr message-receiver: nil name: message args: args
      }

      print("Could not parse " + self current)
      self consume
      nil
    }

    parse-sequence {
      var exprs = [self bind]
      self while-match: Token/Comma do: {
        // There may be a trailing line after the last expression in a block.
        // If we eat the line and then see a closing brace or eof, stop.
        self if-look-ahead: Token/RightParen   then: { return exprs }
        self if-look-ahead: Token/RightBracket then: { return exprs }
        self if-look-ahead: Token/RightBrace   then: { return exprs }
        self if-look-ahead: Token/Eof          then: { return exprs }

        exprs.add(self.bind)
      }
      exprs
    }

    parse-defines {
      var defines = []
      loop {
        defines.add(self.parse-define)

        // TODO(bob): This is kinda nasty.
        self match: Token/RightParen then: { return defines }
        self consume: Token/Comma
        self match: Token/RightParen then: { return defines }
      }
    }

    parse-define {
      self match: Token/Name : Token/Arrow then: { name arrow ->
        // Field.
        var body = self assignment
        return Define name: name text body: body method?: false
      }

      self match: Token/Name then: { name ->
        // Unary method.
        var body = self parse-define-method: []
        return Define name: name text body: body method?: true
      }

      self match: Token/Operator then: { operator ->
        // Operator.
        var param = (self consume: Token/Name) text

        var body = self parse-define-method: [param]
        return Define name: operator text body: body method?: true
      }

      self if-look-ahead: Token/Keyword then: {
        var name = ""
        var params = []

        self while-match: Token/Keyword do: { keyword ->
          name = name + keyword text
          params.add((self consume: Token/Name).text)
        }

        var body = self parse-define-method: params
        return Define name: name body: body method?: true
      }

      // TODO(bob): Handle error.
      print("Unexpected token " + self current + " after bind.")
    }

    parse-define-method: params {
      // Parse the block.
      self consume: Token/LeftBrace error: "Expect block body for method."
      var body = self expression
      self consume: Token/RightBrace error: "Expect '}' after method body."
      Expr block-params: params body: body
    }
  ]
]

files.each { file ->
  print(file)
  var source = Io.read-file(file)
  var lexer = Lexer new-path: file source: source
  var parser = FinchParser new-tokens: lexer
  var expr = parser parse
  print(expr pretty-print)
}
