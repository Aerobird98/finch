C++ Finch proof-of-concept:

The goal of the C++ version is to be a high-quality program that does
a minimal but "complete" Finch interpreter. Many high-level features
(bytecode compilation, coroutines, etc.) will be missing, but what's
there should be solid.

- Codebase
  - A well-defined error-handling strategy
    - Lexer/parser errors
    - Interpreter runtime errors
    - Assertions
  - Rename Ref and String to ref and string
  
- Syntax
  - Don't allow alphanumerics in operators

- Clean up
  - Address and remove //### bob:
  - Get rid of unit tests (using script tests instead)
  
- Application
  - makefile for Unix support
  - use correct relative paths when interpreting "load:"
  
- Interpreter features
  - Primitives
    - More string operations
    - Boolean operators
    - for loops
    - eval
    - mod
    - A full suite of arithmetic operators
  - Move IO out of Ether into separate primitive
  - String conversion
    Any object should be able to handle a "toString" message and
    return a string. "write:" and other places that stringize an
    object should go through that.
  - Basic reflection
    - does-not-understand?
    - send-message?
  + Bytecode compiler so we aren't abusing the C callstack
  
- Hosting
  - Finch should require a host object when being instantiated. This
    object will handle things like memory allocation, and unknown
    global objects (so that Finch can talk to the outside world). This
    way, it can be easily embedded in an existing app.

- Help
  A tutorial and a basic reference doc.

- Documentation
  - Comments for each class and non-private function.
  - License
  
- Examples
  A decent number of sample Finch programs that do interesting or fun
  stuff.

- Test suite
  A series of Finch scripts that will exercise the language features
  by verifying against expected output.