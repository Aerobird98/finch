C++ Finch proof-of-concept:

The goal of the C++ version is to be a high-quality program that does
a minimal but "complete" Finch interpreter. Many high-level features
(bytecode compilation, coroutines, etc.) will be missing, but what's
there should be solid.

- Hosting
  - Add support for registering external methods or objects so that Finch can
    call into the host.
  - Add API for sending a message to a Finch object from code outside the host.
  - Move "load:" into an externally-provided method.
  - Add quit method.
  - Externalize memory allocation.
  - Implement some kind of pimpl pattern to hide host's internal structure from
    users.
    
- Documentation
  - Write guide to hosting Finch inside another application.
  - Document formal grammar?
  - Write tutorials.
  - Document base lib and primitives.
  
- Syntax
  + Build real error-handling strategy into lexer and parser.
  - Symbols?
  - Records or some other simple object literal syntax?
  - Message cascading
  - Figure out if . should be used for 'self' alias, or if it supports 
    implicit self calls. If implicit self calls are supported, Ether stuff will
    have to get moved into Object prototype.
    
- Testing and Quality
  - Make unit tests optionally-compiled with a separate make target.
  - Expand test suite.
  - Add more code assertions.
  - Document code.
  - Figure out strategy for when to pass by value, reference, and pointer.
    Apply strategy consistently.
  - Address and remove //### bob:

- Miscellaneous
  - Figure out how "load:" should handle paths.
  - Figure out how relative path to base lib should work.

- Builtins
  + Add type test methods (number? string? etc.).
  + Make write: call toString: on args.
  - Add eval: primitive.
  - Reflection API.
    - Get messages object supports.
    - Call message programmatically.
    - Remove method.
  - Ability to programmatically handle unhandled message.

- Library
  - Collections?
  
- Interpreter
  + Support coroutines/continuations.
  - Write garbage collector.
  - Optimize closures to only close over and reference variables that are
    actually used. Right now, we maintain a reference to the entire parent
    scope chain which means that *nothing* is every really collected.
  - Try to come up with something cleaner than the current while loop bytecode
    stuff.
    
- Bigger Questions
  - Figure out inheritance. Single prototype? Multiple? Mixins? Classes? None?
    Something implemented at the library level?
  - How can we share code across multiple types effectively? For example, a sort
    method that can be sent to any of a variety of collection "types"?
  - Get rid of globals?