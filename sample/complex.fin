// create the main factory object
obj Complex {
  // constructor
  new(real, imaginary) {
    obj -> Complexes { _real = real, _imaginary = imaginary }
  }
}

// the prototypical complex number
obj Complexes {
  _real = 0
  _imaginary = 0

  // accessors
  real { _real }
  imaginary { _imaginary }

  // string conversion
  to-string {
    _real.to-string + "+" + _imaginary + "i"
  }

  // arithmetic
  + right {
    Complex.new(_real + right.real, _imaginary + right.imaginary)
  }

  - right {
    Complex.new(_real - right.real, _imaginary - right.imaginary)
  }

  * right {
    Complex.new((_real * right.real) - (_imaginary * right.imaginary),
           (_imaginary * right.real) + (_real * right.imaginary))
  }

  magnitude {
    ((_real * _real) + (_imaginary * _imaginary)).sqrt
  }
}

// allow creating complex numbers from normal ones
def Numbers {
  i { Complex.new(0, self) }
}

// test it out a bit
var a = 4.i
var b = Complex.new(2, 3)

write-line("a = " + a)
write-line("b = " + b)
write-line("|b| = " + b.magnitude)
write-line("a + b = " + (a + b))
write-line("a * b = " + (a * b))
