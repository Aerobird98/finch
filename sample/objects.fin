' define a singleton object for the Car "type". this object will be
' the factory for all other cars.
Car <- (||
    ' define the car prototype. all cars will derive from this
    _prototype <- (||
        ' all cars have accessors for their make and model
        self :: make { _make }
        self :: model { _model }

        self :: toString {
            "This car is a " + _make + " " + _model + "."
        }
    )

    ' define a constructor method on the factory.
    make: make model: model {
        ' the constructor simply derives a new car from the car
        ' prototype and then stores the make and model in it
        (|_prototype|
            _make <- make
            _model <- model
        )
        ' like ruby, the last expression in the method is implicitly
        ' the returned value
    }

    ' expose the prototype. this lets us add features to all cars
    prototype { _prototype }
)

' now lets make a car
jetta <- Car make: "volkswagen" model: "jetta"

' and call a method on its prototype, which in turn references the
' specific car's state
writeLine: jetta toString

' now let's try adding something to the car prototype. first we'll
' check to see that it isn't there
writeLine: jetta shortName ' this should write Nil

' now we'll add a method to the prototype
Car prototype :: shortName { _make + " " + _model }

' now lets call it on jetta and see if we can find it
writeLine: jetta shortName
