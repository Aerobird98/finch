write-line: "Running Finch test suite."

' define a Test object the tests can use
def Test Object copy

'### bob: having to make an init method just to set the object
'         variables is kind of dumb
Test add-method: "init" body:
{
    def _suite      ""
    def _test       ""
    def _testShown  False
    def _tests      0
    def _failed     0
}

Test init

Test add-method: "suite:is:" body:
{|name body|
    set _suite name
    body call
    set _suite ""
}

Test add-method: "test:is:" body:
{|name body|
    set _test       name
    set _tests      0
    set _failed     0
    set _testShown  False
    
    body call
    
    if: _failed = 0 then: { .show-header }
    
    write-line: "  " + (_tests - _failed) + " / " + _tests + " tests passed"
    
    set _test ""
}

Test add-method: "show-header" body:
{
    if: _testShown not then:
    {
        write-line: _suite + " / " + _test
        set _testShown True
    }
}

Test add-method: "is-true:" body:
{|actual|
    set _tests _tests + 1
        
    if: actual not then:
    {
        set _failed _failed + 1
        .show-header
        write-line: "  Test " + _tests to-string + " failed."
    }
}

Test add-method: "that:equals:" body:
{|actual expected|
    .is-true: actual = expected
}

' run the test scripts
'### bob: hack! path should be relative to this script's path!
load: "../../test/arithmetic.fin"
load: "../../test/literals.fin"
load: "../../test/scope.fin"