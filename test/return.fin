Test suite: "Return" is: {
  Test test: "return exits enclosing method" is: {
    var a = "0"
    var obj = [
      foo {
        a = a + "1"
        {
          a = a + "2"
          return
          a = a + "3"
        }.call
        a = a + "4"
      }
    ]
    obj.foo

    Test that: a equals: "012"
  }

  Test test: "the method returns the value passed to return" is: {
    var a = "before"
    var obj = [
      foo {
        return "result"
        "bad"
      }
    ]

    Test that: obj.foo equals: "result"
  }

  Test test: "returns work even when passed to tail calls" is: {
    var a = "before"
    var obj = [
      foo {
        if (true) then { return "result" }
      }
    ]

    Test that: obj.foo equals: "result"
  }

  Test test: "returns work in the middle of an expression" is: {
    // This is a regression test for a bug. If you did a return in the middle
    // of an expression, the other operands in the expression would be left on
    // the stack, causing all sorts of trouble.
    var obj = [
      foo { "left" + return "right" }
      bar { self.foo }
    ]

    Test that: obj.bar equals: "right"
  }
}