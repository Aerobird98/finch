Test suite: "Self" is: {
    Test test: "Self in non-method block is Nil" is: {
        block <- { self }

        Test that: block call equals: Nil
    }
    
    Test test: "Self in block is outer self" is: {
        foo <- Object copy
        foo :: toString { "foo" }
        foo :: bar {
            block <- { self toString }
            block call
        }
        
        Test that: foo bar equals: "foo"
    }

    Test test: "Self in parent method is child" is: {
        parent <- Object copy
        parent :: callToString { self toString }
        parent :: toString { "parent" }
        
        child <- parent copy
        child :: toString { "child" }
        
        Test that: parent callToString equals: "parent"
        Test that: child callToString equals: "child"
    }

    Test test: "Self in block is lexical not dynamic scope" is: {
        ' create a block in one object scope
        foo <- Object copy
        foo :: toString { "foo" }
        foo :: block { { self toString } }
        
        ' and call it from within a different object
        bar <- Object copy
        bar :: toString { "bar" }
        bar :: callBlock: block { block call }
        
        Test that: (bar callBlock: foo block) equals: "foo"
        
        ' needs to play nice with inheritance too
        foo2 <- foo copy
        foo2 :: toString { "foo2" }
        Test that: (bar callBlock: foo2 block) equals: "foo2"
    }
    
    Test test: "Recursive inherited method restores outer self" is: {
        parent <- Object copy
        parent :: recurse: recurse {
            ' see what self is bound to
            a <- self toString
            if: recurse then: {
                ' call this exact same method but with a different self
                a <-- a + (child recurse: False)
                ' see that self was correctly restored to parent
                a <-- a + self toString
            }
            a
        }
        parent :: toString { "p" }
        
        child <- parent copy
        child :: toString { "c" }

        Test that: (parent recurse: False) equals: "p"
        Test that: (child  recurse: False) equals: "c"
        Test that: (parent recurse: True) equals: "pcp"
    }
    
    Test test: "Storing a block in a method caches self at that time" is: {
        parent <- Object copy
        parent :: toString { "parent" }
        parent :: makeBlock {
            _block <- { self toString }
        }
        parent :: callBlock { _block call }
        
        child <- parent copy
        child :: toString { "child" }
        
        parent makeBlock
        Test that: child callBlock equals: "parent"
        
        child makeBlock
        Test that: child callBlock equals: "child"
    }
}