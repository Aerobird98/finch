Test suite: "Self" is: {
    Test test: "Self in non-method block is nil" is: {
        block <- { self }

        Test that: block call equals: nil
    }

    Test test: "Self in block is outer self" is: {
        foo <- (||
            toString { "foo" }
            bar {
                block <- { self toString }
                block call
            }
        )

        Test that: foo bar equals: "foo"
    }

    Test test: "Self in parent method is child" is: {
        parent <- (||
            callToString { self toString }
            toString { "parent" }
        )

        child <- (|parent|
            toString { "child" }
        )

        Test that: parent callToString equals: "parent"
        Test that: child callToString equals: "child"
    }

    Test test: "Self in block is lexical not dynamic scope" is: {
        ' create a block in one object scope
        foo <- (||
            toString { "foo" }
            block { { self toString } }
        )

        ' and call it from within a different object
        bar <- (||
            toString { "bar" }
            callBlock: block { block call }
        )

        Test that: (bar callBlock: foo block) equals: "foo"

        ' needs to play nice with inheritance too
        foo2 <- (|foo|
            toString { "foo2" }
        )
        Test that: (bar callBlock: foo2 block) equals: "foo2"
    }

    Test test: "Recursive inherited method restores outer self" is: {
        parent <- (||
            recurse: recurse {
                ' see what self is bound to
                a <- self toString
                if: recurse then: {
                    ' call this exact same method but with a different self
                    a <-- a + (child recurse: false)
                    ' see that self was correctly restored to parent
                    a <-- a + self toString
                }
                a
            }
            toString { "p" }
        )

        child <- (|parent|
            toString { "c" }
        )

        Test that: (parent recurse: false) equals: "p"
        Test that: (child  recurse: false) equals: "c"
        Test that: (parent recurse: true) equals: "pcp"
    }

    Test test: "Storing a block in a method caches self at that time" is: {
        parent <- (||
            toString { "parent" }
            makeBlock {
                _block <- { self toString }
            }
            callBlock { _block call }
        )

        child <- (|parent|
            toString { "child" }
        )

        parent makeBlock
        Test that: child callBlock equals: "parent"

        child makeBlock
        Test that: child callBlock equals: "child"
    }
}