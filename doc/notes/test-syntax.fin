// this file exists to show all syntax for hacking on syntax highlighters.

// line comment

/* block comment */

/* nested /* block */ comment */

// special vars
self true false nil undefined

// assignment
a <- b
a <-- b

// but not in the middle of other operators
><--?

 <-
(<-)<-[<-]<-{<-}

// blocks
{ no arguments }
{
    multi
    line
}

{ arg arg arg -> body }



// object
Object :: (
	/* nested /* block */ comment */
  // By default, just check reference equality.
  = right { self === right }

  != right { (self = right) not }

  // any non-true object is implicitly "false", so sending "not" to it
  // returns true
  not { true }

/* foo */

  // type tests
  array?   { false }
  block?   { false }
  boolean? { false }
  fiber?   { false }
  number?  { false }
  string?  { false }

  if-true: then else: else { else call }

  // calling a non-block like a block just returns the value
  call { self }
  call: a { self }
  call: a : b { self }
  call: a : b : c { self }
  call: a : b : c : d { self }
  call: a : b : c : d : e { self }
  call: a : b : c : d : e : f { self }
  call: a : b : c : d : e : f : g { self }
  call: a : b : c : d : e : f : g : h { self }
  call: a : b : c : d : e : f : g : h : i { self }
  call: a : b : c : d : e : f : g : h : i : j { self }
)

true :: (
  not { false }
  boolean? { true }
  to-string { "true" }
  if-true: then else: else { then call }
)

false :: (
  boolean? { true }
  to-string { "false" }
)

Ether :: (
  // define a for-style loop
  from: start to: end step: step do: block {
    i <- start

    while: { i <= end } do: {
      block call: i
      i <-- i + step
    }
  }

  from: start to: end do: block {
    step <- (if: start <= end then: 1 else: -1)
    from: start to: end step: step do: block
  }

  // do
  do: block { block call }

  // if then
  if: condition then: then { condition if-true: then else: { nil } }
  if: condition then: then else: else { condition if-true: then else: else }

  // a chained if/then/else
  if: if1 then: then1 else-if: if2 then: then2 else: else {
    if: if1 then: then1 else: {
      if: if2 then: then2 else: else
    }
  }

  loop: block {
    while: true do: block
  }

  // while
  while: condition do: block {
    if: condition call then: {
      block call
      while: condition do: block
    }
  }

  while: condition-a and: condition-b do: block {
    while: { condition-a call and: condition-b } do: block
  }

  // until
  until: condition do: block {
    while: { condition call not } do: block
  }

  // build the output methods in terms of the single primitive one
  write: text {
    // make sure the argument is always converted to a string before
    // passing to the primitive version which can't do that.
    #PRIM# write: text to-string
  }

  write-line: text {
    // make sure the argument is always converted to a string before
    // passing to the primitive version which can't do that.
    #PRIM# write: text to-string + "\n"
  }
)

Blocks :: block? { true }

Fiber <- (||
  new: block { #PRIM# new-fiber: block }

  spawn: block {
    fiber <- Fiber new: block
    // immediately run it, discarding the first yielded result
    fiber run
    fiber
  }

  current { #PRIM# current-fiber }

  yield: value {
    #PRIM# switch-to-fiber: Fiber current run-by passing: value
  }

  yield { Fiber yield: nil }
)

Fibers :: (
  fiber? { true }

  run: value {
    _run-by <- Fiber current
    #PRIM# switch-to-fiber: self passing: value
  }

  run { self run: nil }
  run-by { _run-by }
)

Numbers :: (
  number? { true }

  // Double-dispatch.
  + right { right +number: self }
  - right { right -number: self }
  * right { right *number: self }
  / right { right /number: self }
  = right { right =number: self }
)

Object :: (
  // Adding anything to a string converts it to a string and concatenates.
  +string: left { #PRIM# string-concat: left and: self to-string }

  // Comparisons between unrelated types always return false.
  =number: left { false }
  =string: left { false }
)

Strings :: (
  string? { true }

  // Adding a number to a string converts it to a string and concatenates.
  +number: left { left to-string + self }

  // Double-dispatch.
  + right { right +string: self }
  = right { right =string: self }

  =string: left { (#PRIM# string-compare: left to: self) = 0 }
  <  right { (#PRIM# string-compare: self to: right) < 0 }
  >  right { (#PRIM# string-compare: self to: right) > 0 }
  <= right { (#PRIM# string-compare: self to: right) <= 0 }
  >= right { (#PRIM# string-compare: self to: right) >= 0 }

  starts-with: needle {
    (self index-of: needle) = 0
  }

  contains: needle {
    (self index-of: needle) != -1
  }

  from: from to: to {
    self from: from count: to - from
  }
)

Array <- (||
  count: count {
    self count: count fill-with: nil
  }

  count: count fill-with: element {
    result <- []

    from: 1 to: count do: { i -> result add: element }
    result
  }
)

Arrays :: (
  array? { true }

  ++ right {
    result <- []

    self each: { e -> result add: e }
    right each: { e -> result add: e }

    result
  }

  each: block {
    from: 0 to: self length - 1 do: { i ->
      block call: (self at: i)
    }
  }

  map: block {
    result <- []
    self each: { element -> result add: (block call: element) }
    result
  }
)

// truthiness: only two things are true: the true object, and blocks that
// evaluate to it.
Object :: true? { false }
true :: true? { true }

Blocks :: true? { self call true? }

// logical operators
Object :: (
  and: right {
    if: self true? then: {
      right true?
    } else: {
      false
    }
  }

  or: right {
    if: self true? then: {
      true
    } else: {
      right true?
    }
  }
)

// switch/case construct. usage looks like:
// c switch \
//     case: "{" do: { "foo" };
//     case: "}" do: { "blah" };
//     default: { "argh" }
Object :: switch {
  // ### bob: having to do this is lame. :(
  outer-self <- self
  (|Switches|
    _value  <- outer-self
    _done   <- false
    _result <- nil
  )
}

Switches <- (||
  case: case do: block {
    // if this switch has already matched a case, just do nothing
    if: _done? not then: {
      // if the case is a block, then it's a predicate so evaluate
      // it, otherwise it's a value, so compare it to the value being
      // switched
      matched <- if: case block? then: {
        case call: _value
      } else: {
        _value = case
      }

      if: matched then: {
        // execute the block
        _result <- block call: _value
        _done? <- true
      }
    }

    // always return the result. if we haven't matched yet, this will
    // just be nil. once we've matched, it will be the matched value.
    _result
  }

  default: block {
    // if this switch has already matched a case, just do nothing
    if: _done? not then: {
      // execute the block
      _result <- block call: _value
      _done? <- true
    }

    _result
  }
)

//write-line: "Base library loaded."

// ###bob: temp; run tests
load: "../../test/test.fin"
