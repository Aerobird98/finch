// comment

// unary message
obj.message

// operator
obj + arg

// keyword message
obj.do (arg) with (other)
obj.do (123) with { a.block } // can omit () if arg is block

// implicit Ether receiver
if (1 < 2) then { obj message }
+ foo

// blocks
{ obj someMessage }
{ arg -> someMessage }
{ it someMessage } // implicit arg named "it"
{ first, second -> first.gets(second) }

// early return
return resultObject

// variables
var temp = 123 // defines a new local at this scope

foo = 234 // set

// object variables
_someObjVar // leading underscore means obj

// self
// within the body of a method, you can access the object that owns
// the method using "self" or its abbreviation "."
self name
