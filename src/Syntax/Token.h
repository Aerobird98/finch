#pragma once

#include <iostream>

#include "Macros.h"
#include "Ref.h"
#include "FinchString.h"

namespace Finch
{
    // The different types of Tokens that make up Finch source code.
    enum TokenType
    {
        TOKEN_NONE,
        
        TOKEN_LEFT_PAREN,
        TOKEN_RIGHT_PAREN,
        TOKEN_LEFT_BRACKET,
        TOKEN_RIGHT_BRACKET,
        TOKEN_LEFT_BRACE,
        TOKEN_RIGHT_BRACE,
        TOKEN_COMMA,
        TOKEN_DOT,
        TOKEN_PIPE,
        
        TOKEN_ARROW,
        TOKEN_LONG_ARROW,
        TOKEN_BIND,
        TOKEN_SELF,
        TOKEN_UNDEFINED,
        
        TOKEN_NUMBER,
        TOKEN_STRING,
        
        TOKEN_NAME,
        TOKEN_OPERATOR,
        TOKEN_KEYWORD,
        
        TOKEN_LINE,
        TOKEN_IGNORE_LINE,
        TOKEN_EOF
    };
    
    // A single meaningful Token of source code. Generated by the Lexer, and
    // consumed by the Parser.
    class Token
    {
    public:
        Token()
        :   mType(TOKEN_NONE),
            mNumber(0),
            mText()
        {}
        
        Token(TokenType type)
        :   mType(type),
            mNumber(0),
            mText()
        {}
        
        Token(TokenType type, double number)
        :   mType(type),
            mNumber(number),
            mText()
        {}
        
        Token(TokenType type, const String & text)
        :   mType(type),
            mNumber(0),
            mText(text)
        {}
        
        TokenType   Type()   const { return mType; }
        double      Number() const { return mNumber; }
        String      Text()   const { return mText; }
        
    protected:
    private:        
        TokenType   mType;
        double      mNumber;
        String      mText;
    };
    
    std::ostream& operator<<(std::ostream& cout, const Token & token);
}

